{"version":3,"file":"index.mjs","sources":["../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n/*\n* The following modules are intentionally not exported: evalpoly-compile, evalrational-compile\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property' ;\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name continuedFraction\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/tools/continued-fraction}\n*/\nimport continuedFraction from '@stdlib/math-base-tools-continued-fraction';\nsetReadOnly( ns, 'continuedFraction', continuedFraction );\n\n/**\n* @name evalpoly\n* @memberof tools\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/tools/evalpoly}\n*/\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nsetReadOnly( ns, 'evalpoly', evalpoly );\n\n/**\n* @name evalrational\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/tools/evalrational}\n*/\nimport evalrational from '@stdlib/math-base-tools-evalrational';\nsetReadOnly( ns, 'evalrational', evalrational );\n\n/**\n* @name fibpoly\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/tools/fibpoly}\n*/\nimport fibpoly from '@stdlib/math-base-tools-fibpoly';\nsetReadOnly( ns, 'fibpoly', fibpoly );\n\n/**\n* @name hermitepoly\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/tools/hermitepoly}\n*/\nimport hermitepoly from '@stdlib/math-base-tools-hermitepoly';\nsetReadOnly( ns, 'hermitepoly', hermitepoly );\n\n/**\n* @name lucaspoly\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/tools/lucaspoly}\n*/\nimport lucaspoly from '@stdlib/math-base-tools-lucaspoly';\nsetReadOnly( ns, 'lucaspoly', lucaspoly );\n\n/**\n* @name normhermitepoly\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/tools/normhermitepoly}\n*/\nimport normhermitepoly from '@stdlib/math-base-tools-normhermitepoly';\nsetReadOnly( ns, 'normhermitepoly', normhermitepoly );\n\n/**\n* @name sumSeries\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/math/base/tools/sum-series}\n*/\nimport sumSeries from '@stdlib/math-base-tools-sum-series';\nsetReadOnly( ns, 'sumSeries', sumSeries );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["ns","setReadOnly","continuedFraction","evalpoly","evalrational","fibpoly","hermitepoly","lucaspoly","normhermitepoly","sumSeries"],"mappings":";;+vDAwCA,IAAAA,EAAA,CAAA,EAUAC,EAAAD,EAAA,oBAAAE,GAUAD,EAAAD,EAAA,WAAAG,GAUAF,EAAAD,EAAA,eAAAI,GAUAH,EAAAD,EAAA,UAAAK,GAUAJ,EAAAD,EAAA,cAAAM,GAUAL,EAAAD,EAAA,YAAAO,GAUAN,EAAAD,EAAA,kBAAAQ,GAUAP,EAAAD,EAAA,YAAAS"}